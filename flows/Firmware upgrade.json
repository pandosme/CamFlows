[
    {
        "id": "e7d1969f7200702e",
        "type": "tab",
        "label": "Firmware upgrade",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8b749bdf0f7b31a2",
        "type": "group",
        "z": "e7d1969f7200702e",
        "name": "Refresh Information",
        "style": {
            "stroke": "#000000",
            "fill": "#ffffbf",
            "label": true
        },
        "nodes": [
            "b8bb93699aaa6339",
            "e4dcdd5b3c648938",
            "eae125cfb8ef4852",
            "340d539a25a46ece",
            "4d10c45785c694fa",
            "94108cfa0e521220",
            "29a679598f8169de",
            "33b250e1e7c59f29",
            "161ff43c92f86959",
            "e20d70746c0c9cac",
            "6f4504761ef16af7",
            "a134319f80a27a3d",
            "ebd30533c68c0bf6"
        ],
        "x": 294,
        "y": 459,
        "w": 812,
        "h": 382
    },
    {
        "id": "125b2e3abce27f4f",
        "type": "group",
        "z": "e7d1969f7200702e",
        "name": "Download latest if needed",
        "style": {
            "label": true,
            "stroke": "#000000",
            "fill": "#bfdbef",
            "color": "#000000"
        },
        "nodes": [
            "bcb452c9bba181d2",
            "5d5f3c2082efd858",
            "41f2e23a533c05ba",
            "aabba2e2797f3b48",
            "05051cbb360880dd",
            "39b683c98cc25ed3",
            "184c87ad8e3ebb9a",
            "abd7b87d21af84d3",
            "dd4b00fa9af6b5a2",
            "b13dd81abb9bc958"
        ],
        "x": 294,
        "y": 879,
        "w": 812,
        "h": 242
    },
    {
        "id": "4b611f6ffac39a4a",
        "type": "group",
        "z": "e7d1969f7200702e",
        "name": "Upgrade",
        "style": {
            "stroke": "#000000",
            "fill": "#e3f3d3",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "2a7e3790279e9b37",
            "04529b4764756016",
            "7ff0b0c3c501cdfd",
            "984fca3f33dd5318",
            "61e2d1d5db165229",
            "02fc1e0b9a6f8913",
            "dec2e84f60c88979",
            "e04dcaf9561c25b5"
        ],
        "x": 254,
        "y": 79,
        "w": 732,
        "h": 202
    },
    {
        "id": "a134319f80a27a3d",
        "type": "junction",
        "z": "e7d1969f7200702e",
        "g": "8b749bdf0f7b31a2",
        "x": 1080,
        "y": 660,
        "wires": [
            [
                "33b250e1e7c59f29",
                "4ad83e112eba670a"
            ]
        ]
    },
    {
        "id": "dd4b00fa9af6b5a2",
        "type": "junction",
        "z": "e7d1969f7200702e",
        "g": "125b2e3abce27f4f",
        "x": 1080,
        "y": 980,
        "wires": [
            [
                "cdf4c95191c69b48"
            ]
        ]
    },
    {
        "id": "b13dd81abb9bc958",
        "type": "junction",
        "z": "e7d1969f7200702e",
        "g": "125b2e3abce27f4f",
        "x": 980,
        "y": 1040,
        "wires": [
            [
                "dd4b00fa9af6b5a2"
            ]
        ]
    },
    {
        "id": "e04dcaf9561c25b5",
        "type": "junction",
        "z": "e7d1969f7200702e",
        "g": "4b611f6ffac39a4a",
        "x": 960,
        "y": 120,
        "wires": [
            [
                "c6a778c82dd71f18"
            ]
        ]
    },
    {
        "id": "bcb452c9bba181d2",
        "type": "exec",
        "z": "e7d1969f7200702e",
        "g": "125b2e3abce27f4f",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 370,
        "y": 1060,
        "wires": [
            [],
            [],
            [
                "184c87ad8e3ebb9a"
            ]
        ]
    },
    {
        "id": "41f2e23a533c05ba",
        "type": "delay",
        "z": "e7d1969f7200702e",
        "g": "125b2e3abce27f4f",
        "name": "",
        "pauseType": "delayv",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1000,
        "y": 920,
        "wires": [
            [
                "39b683c98cc25ed3"
            ]
        ]
    },
    {
        "id": "aabba2e2797f3b48",
        "type": "change",
        "z": "e7d1969f7200702e",
        "g": "125b2e3abce27f4f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "delay",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 920,
        "wires": [
            [
                "41f2e23a533c05ba"
            ]
        ]
    },
    {
        "id": "5cf098ce61b16ea3",
        "type": "mqtt out",
        "z": "e7d1969f7200702e",
        "name": "axis/upgrade/+",
        "topic": "",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "de0debe784ae927d",
        "x": 630,
        "y": 320,
        "wires": []
    },
    {
        "id": "ed46d943a6439268",
        "type": "inject",
        "z": "e7d1969f7200702e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 500,
        "wires": [
            [
                "6f4504761ef16af7"
            ]
        ]
    },
    {
        "id": "b8bb93699aaa6339",
        "type": "Axis device",
        "z": "e7d1969f7200702e",
        "g": "8b749bdf0f7b31a2",
        "name": "",
        "preset": "a5d60ef5587cc8fc",
        "action": "Device Info",
        "cgi": "",
        "data": "",
        "options": "",
        "filename": "",
        "x": 390,
        "y": 560,
        "wires": [
            [
                "ebd30533c68c0bf6"
            ]
        ]
    },
    {
        "id": "e4dcdd5b3c648938",
        "type": "change",
        "z": "e7d1969f7200702e",
        "g": "8b749bdf0f7b31a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "device",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 560,
        "wires": [
            [
                "eae125cfb8ef4852",
                "0af1f576d731a6f7"
            ]
        ]
    },
    {
        "id": "eae125cfb8ef4852",
        "type": "file in",
        "z": "e7d1969f7200702e",
        "g": "8b749bdf0f7b31a2",
        "name": "",
        "filename": "sdcard/firmware/ver.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 420,
        "y": 620,
        "wires": [
            [
                "94108cfa0e521220"
            ]
        ]
    },
    {
        "id": "340d539a25a46ece",
        "type": "catch",
        "z": "e7d1969f7200702e",
        "g": "8b749bdf0f7b31a2",
        "name": "",
        "scope": [
            "eae125cfb8ef4852"
        ],
        "uncaught": false,
        "x": 370,
        "y": 660,
        "wires": [
            [
                "29a679598f8169de"
            ]
        ]
    },
    {
        "id": "4d10c45785c694fa",
        "type": "file",
        "z": "e7d1969f7200702e",
        "g": "8b749bdf0f7b31a2",
        "name": "",
        "filename": "sdcard/firmware/ver.txt",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 760,
        "y": 660,
        "wires": [
            [
                "a134319f80a27a3d"
            ]
        ]
    },
    {
        "id": "94108cfa0e521220",
        "type": "change",
        "z": "e7d1969f7200702e",
        "g": "8b749bdf0f7b31a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "downloaded",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 620,
        "wires": [
            [
                "a134319f80a27a3d"
            ]
        ]
    },
    {
        "id": "29a679598f8169de",
        "type": "change",
        "z": "e7d1969f7200702e",
        "g": "8b749bdf0f7b31a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "downloaded",
                "pt": "flow",
                "to": "Undefined",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Undefined",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 660,
        "wires": [
            [
                "4d10c45785c694fa"
            ]
        ]
    },
    {
        "id": "33b250e1e7c59f29",
        "type": "function",
        "z": "e7d1969f7200702e",
        "g": "8b749bdf0f7b31a2",
        "name": "Get latest version",
        "func": "var model = flow.get(\"device\").model.replace(/ /g, \"_\");\nmsg.url = \"http://ftp.axis.com/pub_soft/MPQT/\" + model + \"/latest/ver.txt\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 740,
        "wires": [
            [
                "161ff43c92f86959"
            ]
        ]
    },
    {
        "id": "161ff43c92f86959",
        "type": "http request",
        "z": "e7d1969f7200702e",
        "g": "8b749bdf0f7b31a2",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 740,
        "wires": [
            [
                "e20d70746c0c9cac",
                "5dd7f4146a5aa560"
            ]
        ]
    },
    {
        "id": "e20d70746c0c9cac",
        "type": "function",
        "z": "e7d1969f7200702e",
        "g": "8b749bdf0f7b31a2",
        "name": "Initialize",
        "func": "if(msg.statusCode >= 400) {\n    flow.set(\"latest\",\"Error\");\n    node.error(\"Axis FTP responded \" + msg.statusCode,msg);\n    return;\n}\n\nflow.set(\"latest\",msg.payload);\n\nvar busy = flow.get(\"busy\") || false;\nflow.set(\"busy\",busy);\nflow.set(\"message\",\"Info updated\");\nif( flow.get(\"device\").authenticated === false )\n    flow.set(\"message\",\"Error: Device credentials unautorized.  Check user/password\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 800,
        "wires": [
            [
                "dc8c8d15db76627d"
            ]
        ]
    },
    {
        "id": "98f142cdd0d00b1e",
        "type": "link in",
        "z": "e7d1969f7200702e",
        "name": "link in 53",
        "links": [
            "dc8c8d15db76627d",
            "cdf4c95191c69b48",
            "c6a778c82dd71f18"
        ],
        "x": 105,
        "y": 320,
        "wires": [
            [
                "8b8331a2e5e0c528"
            ]
        ]
    },
    {
        "id": "dc8c8d15db76627d",
        "type": "link out",
        "z": "e7d1969f7200702e",
        "name": "link out 41",
        "mode": "link",
        "links": [
            "98f142cdd0d00b1e",
            "8ae1fe3c4846c0e5"
        ],
        "x": 1315,
        "y": 800,
        "wires": []
    },
    {
        "id": "22011d1a25613478",
        "type": "comment",
        "z": "e7d1969f7200702e",
        "name": "Refresh",
        "info": "",
        "x": 1210,
        "y": 800,
        "wires": []
    },
    {
        "id": "efc89673a05a2662",
        "type": "debug",
        "z": "e7d1969f7200702e",
        "name": "debug 246",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 360,
        "wires": []
    },
    {
        "id": "0af1f576d731a6f7",
        "type": "debug",
        "z": "e7d1969f7200702e",
        "name": "debug 247",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 560,
        "wires": []
    },
    {
        "id": "4ad83e112eba670a",
        "type": "debug",
        "z": "e7d1969f7200702e",
        "name": "debug 248",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 660,
        "wires": []
    },
    {
        "id": "8b8331a2e5e0c528",
        "type": "function",
        "z": "e7d1969f7200702e",
        "name": "Message",
        "func": "var device = flow.get(\"device\");\n\nmsg.topic =\"axis/upgrade/\" + device.serial;\nmsg.payload = {\n    message: flow.get(\"message\"),\n    group: flow.get(\"group\") || \"Undefined\",\n    location: flow.get(\"location\") || \"Undefined\",\n    name: device.hostname,\n    serial: device.serial, \n    model: device.model,\n    firmware: device.firmware,\n    downloaded: flow.get(\"downloaded\"),\n    latest:  flow.get(\"latest\"),\n    timestamp: new Date().getTime()\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 320,
        "wires": [
            [
                "efc89673a05a2662",
                "5cf098ce61b16ea3"
            ]
        ]
    },
    {
        "id": "6f4504761ef16af7",
        "type": "change",
        "z": "e7d1969f7200702e",
        "g": "8b749bdf0f7b31a2",
        "name": "Set Location and Group Here",
        "rules": [
            {
                "t": "set",
                "p": "location",
                "pt": "flow",
                "to": "Home",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "group",
                "pt": "flow",
                "to": "Production",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "busy",
                "pt": "flow",
                "to": "false",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 500,
        "wires": [
            [
                "b8bb93699aaa6339"
            ]
        ]
    },
    {
        "id": "5dd7f4146a5aa560",
        "type": "debug",
        "z": "e7d1969f7200702e",
        "name": "debug 249",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 740,
        "wires": []
    },
    {
        "id": "3c61626f0901e526",
        "type": "catch",
        "z": "e7d1969f7200702e",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 170,
        "y": 360,
        "wires": [
            [
                "88bb892da8a6bcc3"
            ]
        ]
    },
    {
        "id": "8ae1fe3c4846c0e5",
        "type": "link in",
        "z": "e7d1969f7200702e",
        "name": "link in 54",
        "links": [
            "dc8c8d15db76627d"
        ],
        "x": 185,
        "y": 920,
        "wires": [
            [
                "05051cbb360880dd"
            ]
        ]
    },
    {
        "id": "05051cbb360880dd",
        "type": "function",
        "z": "e7d1969f7200702e",
        "g": "125b2e3abce27f4f",
        "name": "Download latest?",
        "func": "var busy = flow.get(\"busy\") || false;\nif( busy )\n    return;\n    \nif( flow.get(\"latest\") === flow.get(\"downloaded\") )\n    return;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 920,
        "wires": [
            [
                "5d5f3c2082efd858"
            ]
        ]
    },
    {
        "id": "39b683c98cc25ed3",
        "type": "function",
        "z": "e7d1969f7200702e",
        "g": "125b2e3abce27f4f",
        "name": "Download",
        "func": "flow.set(\"message\",\"Downloading firmware version \" + flow.get(\"latest\") + \".\");\nflow.set(\"busy\",true);\n\nvar model = flow.get(\"device\").model.replace(/ /g, \"_\");\nvar url = \"http://ftp.axis.com/pub_soft/MPQT/\" + model + \"/latest/\" + model + \".bin\";\n\nmsg.payload = \"curl -o sdcard/firmware/firmware.bin \" + url;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 980,
        "wires": [
            [
                "bcb452c9bba181d2",
                "dd4b00fa9af6b5a2"
            ]
        ]
    },
    {
        "id": "cdf4c95191c69b48",
        "type": "link out",
        "z": "e7d1969f7200702e",
        "name": "link out 42",
        "mode": "link",
        "links": [
            "98f142cdd0d00b1e"
        ],
        "x": 1315,
        "y": 980,
        "wires": []
    },
    {
        "id": "184c87ad8e3ebb9a",
        "type": "function",
        "z": "e7d1969f7200702e",
        "g": "125b2e3abce27f4f",
        "name": "Result",
        "func": "flow.set(\"busy\",false);\n\nif( msg.payload.code !== 0 ) {  //\n    flow.set(\"message\",\"Error: Firmware download failed\");\n    node.send([msg,null]);\n    return \n}\n\nflow.set(\"message\",\"Firmware \" + flow.get(\"latest\") + \" downloaded\");\nflow.set(\"downloaded\",flow.get(\"latest\"));\nmsg.payload =  flow.get(\"latest\");\nnode.send([null,msg]);\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1060,
        "wires": [
            [
                "b13dd81abb9bc958"
            ],
            [
                "abd7b87d21af84d3"
            ]
        ]
    },
    {
        "id": "abd7b87d21af84d3",
        "type": "file",
        "z": "e7d1969f7200702e",
        "g": "125b2e3abce27f4f",
        "name": "",
        "filename": "sdcard/firmware/ver.txt",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 780,
        "y": 1080,
        "wires": [
            [
                "b13dd81abb9bc958"
            ]
        ]
    },
    {
        "id": "88bb892da8a6bcc3",
        "type": "function",
        "z": "e7d1969f7200702e",
        "name": "Message",
        "func": "var device = flow.get(\"device\");\n\nmsg.topic =\"axis/upgrade/\" + device.serial;\nmsg.payload = {\n    message: \"Error: \" + msg.error.message,\n    group: flow.get(\"group\") || \"Undefined\",\n    location: flow.get(\"location\") || \"Undefined\",\n    name: device.hostname,\n    serial: device.serial, \n    model: device.model,\n    firmware: device.firmware,\n    downloaded: flow.get(\"downloaded\"),\n    latest:  flow.get(\"latest\"),\n    timestamp: new Date().getTime()\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 360,
        "wires": [
            [
                "5cf098ce61b16ea3",
                "efc89673a05a2662"
            ]
        ]
    },
    {
        "id": "4aad854f253a7396",
        "type": "mqtt in",
        "z": "e7d1969f7200702e",
        "name": "",
        "topic": "axis/upgrade",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "de0debe784ae927d",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 120,
        "wires": [
            [
                "2a7e3790279e9b37"
            ]
        ]
    },
    {
        "id": "2a7e3790279e9b37",
        "type": "function",
        "z": "e7d1969f7200702e",
        "g": "4b611f6ffac39a4a",
        "name": "Check to see if upgrade applies",
        "func": "if( flow.get(\"busy\") )\n    return;\n\nif( flow.get(\"device\").firmware === flow.get(\"latest\"))\n    return;\n\nif( msg.payload.hasOwnProperty(\"location\") )\n    if( flow.get(\"location\") != msg.payload.location)\n        return;\n\nif( msg.payload.hasOwnProperty(\"group\") )\n    if( flow.get(\"group\") != msg.payload.group)\n        return;\n\nif( msg.payload.hasOwnProperty(\"model\") )\n    if( flow.get(\"device\").model != msg.payload.model )\n        return;\n\nif( msg.payload.hasOwnProperty(\"serial\") ) {\n    if( typeof msg.payload.serial === \"string\") {\n        if( msg.payload.serial !== flow.get(\"device\").serial) \n            return;\n    } else {\n        if( Array.isArray(msg.payload.serial) ) {\n            var match = false;\n            msg.payload.serial.forEach(function(item){\n                if( item === flow.get(\"device\").serial)\n                    match = true;\n            });\n            if( !match )\n                return;\n        }\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 120,
        "wires": [
            [
                "04529b4764756016"
            ]
        ]
    },
    {
        "id": "04529b4764756016",
        "type": "change",
        "z": "e7d1969f7200702e",
        "g": "4b611f6ffac39a4a",
        "name": "Message",
        "rules": [
            {
                "t": "set",
                "p": "message",
                "pt": "flow",
                "to": "Firmware upgrade started",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "busy",
                "pt": "flow",
                "to": "true",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 120,
        "wires": [
            [
                "e04dcaf9561c25b5",
                "7ff0b0c3c501cdfd"
            ]
        ]
    },
    {
        "id": "c6a778c82dd71f18",
        "type": "link out",
        "z": "e7d1969f7200702e",
        "name": "link out 43",
        "mode": "link",
        "links": [
            "98f142cdd0d00b1e"
        ],
        "x": 1185,
        "y": 120,
        "wires": []
    },
    {
        "id": "e6e4a460367a6e5b",
        "type": "comment",
        "z": "e7d1969f7200702e",
        "name": "Status",
        "info": "",
        "x": 1210,
        "y": 980,
        "wires": []
    },
    {
        "id": "08144fd27c0b6eeb",
        "type": "comment",
        "z": "e7d1969f7200702e",
        "name": "Status",
        "info": "",
        "x": 1080,
        "y": 120,
        "wires": []
    },
    {
        "id": "7ff0b0c3c501cdfd",
        "type": "change",
        "z": "e7d1969f7200702e",
        "g": "4b611f6ffac39a4a",
        "name": "Firmware file",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sdcard/firmware/firmware.bin",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "sdcard/firmware/firmware.bin",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 180,
        "wires": [
            [
                "984fca3f33dd5318"
            ]
        ]
    },
    {
        "id": "984fca3f33dd5318",
        "type": "Axis device",
        "z": "e7d1969f7200702e",
        "g": "4b611f6ffac39a4a",
        "name": "",
        "preset": "a5d60ef5587cc8fc",
        "action": "Upgrade firmware",
        "cgi": "",
        "data": "",
        "options": "",
        "filename": "",
        "x": 570,
        "y": 180,
        "wires": [
            [
                "61e2d1d5db165229"
            ]
        ]
    },
    {
        "id": "61e2d1d5db165229",
        "type": "change",
        "z": "e7d1969f7200702e",
        "g": "4b611f6ffac39a4a",
        "name": "Message",
        "rules": [
            {
                "t": "set",
                "p": "message",
                "pt": "flow",
                "to": "Upgrade complete.  Restarting.",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "busy",
                "pt": "flow",
                "to": "false",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 180,
        "wires": [
            [
                "e04dcaf9561c25b5"
            ]
        ]
    },
    {
        "id": "02fc1e0b9a6f8913",
        "type": "catch",
        "z": "e7d1969f7200702e",
        "g": "4b611f6ffac39a4a",
        "name": "",
        "scope": [
            "984fca3f33dd5318"
        ],
        "uncaught": false,
        "x": 530,
        "y": 240,
        "wires": [
            [
                "dec2e84f60c88979"
            ]
        ]
    },
    {
        "id": "dec2e84f60c88979",
        "type": "change",
        "z": "e7d1969f7200702e",
        "g": "4b611f6ffac39a4a",
        "name": "Message",
        "rules": [
            {
                "t": "set",
                "p": "message",
                "pt": "flow",
                "to": "Error: Upgrade failed.",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "busy",
                "pt": "flow",
                "to": "false",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 240,
        "wires": [
            [
                "e04dcaf9561c25b5"
            ]
        ]
    },
    {
        "id": "c29fd339ca1aa036",
        "type": "comment",
        "z": "e7d1969f7200702e",
        "name": "Version 1.0.1",
        "info": "# Overview\nThis flow checks every night if there a new firmware availbel for the device that it is hosted on.  \nIf so it will go inte a random delay between 1 second and 6 hours and download the firmware file to the SD Card.\n\nWhen an MQTT message is posted on \"axis/upgrade\" the flow will upgrade.  All operations are messaged back on MQTT in order to monitor.\n\n\n# Upgrade\nIt is possible to filter what devices are to be updated. If the payload is an empty object {}, it will update all devices device.\n\n## Upgrade filter\n1. Poperty \"location\" will filter devices in a specific location\n2. Property \"group\" will filter devices in a specific location\n3. Property \"model\" will filter devices with a model id\n4. Property serial will filter a specific serial number (e.g. \"ACCCxxxxx\") or a list of serial numbers (e.g. [\"ACCCxxxxx\",\"...\"])\n\n# Configuration\n1. Double-click \"axis/upgrade\" to set the MQTT client setting to connect to your MQTT Broker\n2. Double-click \"Upgrade firmware\" to set the Axis device credentials\n3. Double-click \"Set Location and Group Here\" to set location and group name to the specific camera\n",
        "x": 330,
        "y": 40,
        "wires": []
    },
    {
        "id": "5e2a9d0558ae8f5c",
        "type": "inject",
        "z": "e7d1969f7200702e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 880,
        "wires": [
            [
                "05051cbb360880dd"
            ]
        ]
    },
    {
        "id": "f3bca55d47a62c0e",
        "type": "inject",
        "z": "e7d1969f7200702e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 980,
        "wires": [
            [
                "39b683c98cc25ed3"
            ]
        ]
    },
    {
        "id": "5d5f3c2082efd858",
        "type": "random",
        "z": "e7d1969f7200702e",
        "g": "125b2e3abce27f4f",
        "name": "",
        "low": "1000",
        "high": "21600000",
        "inte": "true",
        "property": "payload",
        "x": 600,
        "y": 920,
        "wires": [
            [
                "aabba2e2797f3b48"
            ]
        ]
    },
    {
        "id": "ebd30533c68c0bf6",
        "type": "function",
        "z": "e7d1969f7200702e",
        "g": "8b749bdf0f7b31a2",
        "name": "Fix name",
        "func": "if (msg.payload.model === \"M3057\") msg.payload.model = \"M3057-PLVE\";\nif (msg.payload.model === \"Q1645-LE\") msg.payload.model = \"Q1645\";\nif (msg.payload.model === \"Q3517-LV\") msg.payload.model = \"Q3517\";\nif (msg.payload.model === \"Q1615-LE Mk III\") msg.payload.model = \"Q1615\";\nif (msg.payload.model === \"M3058\") msg.payload.model = \"M3058-PLVE\";\nif (msg.payload.model === \"M3037-PVE\") msg.payload.model = \"M3037\";\nif (msg.payload.model === \"Q1647-LE\") msg.payload.model = \"Q1647\";\nif (msg.payload.model === \"M2026-LE-MkII\") msg.payload.model = \"M2026-LE_Mk_II\";\nif (msg.payload.model === \"Q3518\") msg.payload.model = \"Q3518-LVE\";\nif (msg.payload.model === \"M3045\") msg.payload.model = \"M3045-V\";\nif (msg.payload.model === \"Q3515-LVE\") msg.payload.model = \"Q3515\";\nif (msg.payload.model === \"M3106-LVE MkII\") msg.payload.model = \"M3106-LVE_Mk_II\";\nif (msg.payload.model === \"FA51-B\") msg.payload.model = \"FA51\";\nif (msg.payload.model === \"M1137-E\") msg.payload.model = \"M1137\";\nif (msg.payload.model === \"Q3517-LVE\") msg.payload.model = \"Q3517\";\nif (msg.payload.model === \"Q3515-LV\") msg.payload.model = \"Q3515\";\nif (msg.payload.model === \"M3106-L-MkII\") msg.payload.model = \"M3106-L_Mk_II\";\nif (msg.payload.model === \"Q3517-SLVE\") msg.payload.model = \"Q3517\";\nif (msg.payload.model === \"M1135-E\") msg.payload.model = \"M1135\";\nif (msg.payload.model === \"C Cube L\") msg.payload.model = \"Companion_Cube_L\";\nif (msg.payload.model === \"Q1656-BLE\") msg.payload.model = \"Q1656-LE\";\nif (msg.payload.model === \"A1210-B\") msg.payload.model = \"A1210\";\nif (msg.payload.model === \"M1135 Mk II\") msg.payload.model = \"M1135\";\nif (msg.payload.model === \"Q1656-BE\") msg.payload.model = \"Q1656\";\nif (msg.payload.model === \"C Dome V\") msg.payload.model = \"Companion_Dome_WV\";\nif (msg.payload.model === \"C Dome WV\") msg.payload.model = \"Companion_Dome_WV\";\nif (msg.payload.model === \"M1137-E\") msg.payload.model = \"M1137_Mk_II\";\nif (msg.payload.model === \"C1211-E\") msg.payload.model = \"C1211\";\nif (msg.payload.model === \"Q1656-B\") msg.payload.model = \"Q1656\";\nif (msg.payload.model === \"Q1656-DLE\") msg.payload.model = \"Q1656-LE\";\nif (msg.payload.model === \"M1135-E Mk II\") msg.payload.model = \"M1135_Mk_II\";\nif (msg.payload.model === \"M1137-E\") msg.payload.model = \"M1137_Mk_II\";\nif (msg.payload.model === \"P3267-LVE Mk II\") msg.payload.model = \"P3267-LVE\";\nif (msg.payload.model === \"C1210\") msg.payload.model = \"C1210-E\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 560,
        "wires": [
            [
                "e4dcdd5b3c648938"
            ]
        ]
    },
    {
        "id": "de0debe784ae927d",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "10.13.8.20",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "a5d60ef5587cc8fc",
        "type": "Device Access",
        "name": "Localhost",
        "address": "localhost",
        "protocol": "http"
    }
]
