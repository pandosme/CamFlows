[
    {
        "id": "9ce7dac9e84a1e3f",
        "type": "tab",
        "label": "Firmware upgrade",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "732cc625ddaa4208",
        "type": "group",
        "z": "9ce7dac9e84a1e3f",
        "name": "Refresh Information",
        "style": {
            "stroke": "#000000",
            "fill": "#ffffbf",
            "label": true
        },
        "nodes": [
            "076ba23e2201f869",
            "9d2ead3077ef7dc1",
            "f65547a6fef74dc0",
            "2240a98adf57e2fd",
            "2d51c60ca1a6a10e",
            "62ccd774ca7de6af",
            "c54c967bfb7658e9",
            "b0efe13469fa1214",
            "06b7af6c5053063b",
            "da8b8a4d2c8f3788",
            "31b9c3ccdcc34083",
            "b283aebb1e828eb5",
            "7366b5c2b1815026"
        ],
        "x": 304,
        "y": 199,
        "w": 822,
        "h": 382
    },
    {
        "id": "1893a4a4f2436617",
        "type": "group",
        "z": "9ce7dac9e84a1e3f",
        "name": "Download latest if needed",
        "style": {
            "label": true,
            "stroke": "#000000",
            "fill": "#bfdbef",
            "color": "#000000"
        },
        "nodes": [
            "d31e5f2ab12a2b15",
            "247a0c07e614b622",
            "8aca0c428f0aaf1a",
            "7609a83bd8e0df2b",
            "964bee1f68b7ed53",
            "e9b22fb6943a14d6",
            "b13fd130224421a1",
            "3c4556bdf2407a17",
            "2bcce98904f9ed0f",
            "0ff4a7e1a81eb8be"
        ],
        "x": 314,
        "y": 639,
        "w": 812,
        "h": 242
    },
    {
        "id": "d94879c184b4f972",
        "type": "group",
        "z": "9ce7dac9e84a1e3f",
        "name": "Upgrade",
        "style": {
            "stroke": "#000000",
            "fill": "#e3f3d3",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "efef4250fb78f421",
            "be46c464d00fafc4",
            "2de49737a603713c",
            "6caa83c75bcdcbc4",
            "b5c3388d9343d1b3",
            "8ff7b09f18d667bc",
            "d68fae4ec75f8e6f",
            "2b82e1efb2443622"
        ],
        "x": 314,
        "y": 939,
        "w": 732,
        "h": 202
    },
    {
        "id": "b283aebb1e828eb5",
        "type": "junction",
        "z": "9ce7dac9e84a1e3f",
        "g": "732cc625ddaa4208",
        "x": 1100,
        "y": 400,
        "wires": [
            [
                "b0efe13469fa1214",
                "521c4c6f2e3a2259"
            ]
        ]
    },
    {
        "id": "2bcce98904f9ed0f",
        "type": "junction",
        "z": "9ce7dac9e84a1e3f",
        "g": "1893a4a4f2436617",
        "x": 1100,
        "y": 740,
        "wires": [
            [
                "e422fd5d80b7c5de"
            ]
        ]
    },
    {
        "id": "0ff4a7e1a81eb8be",
        "type": "junction",
        "z": "9ce7dac9e84a1e3f",
        "g": "1893a4a4f2436617",
        "x": 1000,
        "y": 800,
        "wires": [
            [
                "2bcce98904f9ed0f"
            ]
        ]
    },
    {
        "id": "2b82e1efb2443622",
        "type": "junction",
        "z": "9ce7dac9e84a1e3f",
        "g": "d94879c184b4f972",
        "x": 1020,
        "y": 980,
        "wires": [
            [
                "b183868a9dbb9817"
            ]
        ]
    },
    {
        "id": "d31e5f2ab12a2b15",
        "type": "exec",
        "z": "9ce7dac9e84a1e3f",
        "g": "1893a4a4f2436617",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 390,
        "y": 820,
        "wires": [
            [],
            [],
            [
                "b13fd130224421a1"
            ]
        ]
    },
    {
        "id": "8aca0c428f0aaf1a",
        "type": "delay",
        "z": "9ce7dac9e84a1e3f",
        "g": "1893a4a4f2436617",
        "name": "",
        "pauseType": "delayv",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1020,
        "y": 680,
        "wires": [
            [
                "e9b22fb6943a14d6"
            ]
        ]
    },
    {
        "id": "7609a83bd8e0df2b",
        "type": "change",
        "z": "9ce7dac9e84a1e3f",
        "g": "1893a4a4f2436617",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "delay",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 680,
        "wires": [
            [
                "8aca0c428f0aaf1a"
            ]
        ]
    },
    {
        "id": "ad2fb95b329e9250",
        "type": "mqtt out",
        "z": "9ce7dac9e84a1e3f",
        "name": "axis/upgrade/+",
        "topic": "",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "971c147e8a96ed40",
        "x": 640,
        "y": 100,
        "wires": []
    },
    {
        "id": "3b3abf8b472ef7ce",
        "type": "inject",
        "z": "9ce7dac9e84a1e3f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 240,
        "wires": [
            [
                "31b9c3ccdcc34083"
            ]
        ]
    },
    {
        "id": "076ba23e2201f869",
        "type": "Axis device",
        "z": "9ce7dac9e84a1e3f",
        "g": "732cc625ddaa4208",
        "name": "",
        "preset": "a5d60ef5587cc8fc",
        "action": "Device Info",
        "cgi": "",
        "data": "",
        "options": "",
        "filename": "",
        "x": 410,
        "y": 300,
        "wires": [
            [
                "7366b5c2b1815026"
            ]
        ]
    },
    {
        "id": "9d2ead3077ef7dc1",
        "type": "change",
        "z": "9ce7dac9e84a1e3f",
        "g": "732cc625ddaa4208",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "device",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 300,
        "wires": [
            [
                "f65547a6fef74dc0",
                "2f6b3399ebae022e"
            ]
        ]
    },
    {
        "id": "f65547a6fef74dc0",
        "type": "file in",
        "z": "9ce7dac9e84a1e3f",
        "g": "732cc625ddaa4208",
        "name": "",
        "filename": "sdcard/firmware/ver.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 440,
        "y": 360,
        "wires": [
            [
                "62ccd774ca7de6af"
            ]
        ]
    },
    {
        "id": "2240a98adf57e2fd",
        "type": "catch",
        "z": "9ce7dac9e84a1e3f",
        "g": "732cc625ddaa4208",
        "name": "",
        "scope": [
            "f65547a6fef74dc0"
        ],
        "uncaught": false,
        "x": 390,
        "y": 400,
        "wires": [
            [
                "c54c967bfb7658e9"
            ]
        ]
    },
    {
        "id": "2d51c60ca1a6a10e",
        "type": "file",
        "z": "9ce7dac9e84a1e3f",
        "g": "732cc625ddaa4208",
        "name": "",
        "filename": "sdcard/firmware/ver.txt",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 780,
        "y": 400,
        "wires": [
            [
                "b283aebb1e828eb5"
            ]
        ]
    },
    {
        "id": "62ccd774ca7de6af",
        "type": "change",
        "z": "9ce7dac9e84a1e3f",
        "g": "732cc625ddaa4208",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "downloaded",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 360,
        "wires": [
            [
                "b283aebb1e828eb5"
            ]
        ]
    },
    {
        "id": "c54c967bfb7658e9",
        "type": "change",
        "z": "9ce7dac9e84a1e3f",
        "g": "732cc625ddaa4208",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "downloaded",
                "pt": "flow",
                "to": "Undefined",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Undefined",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 400,
        "wires": [
            [
                "2d51c60ca1a6a10e"
            ]
        ]
    },
    {
        "id": "b0efe13469fa1214",
        "type": "function",
        "z": "9ce7dac9e84a1e3f",
        "g": "732cc625ddaa4208",
        "name": "Get latest version",
        "func": "var model = flow.get(\"device\").model.replace(/ /g, \"_\");\nmsg.url = \"http://ftp.axis.com/pub_soft/MPQT/\" + model + \"/latest/ver.txt\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 480,
        "wires": [
            [
                "06b7af6c5053063b"
            ]
        ]
    },
    {
        "id": "06b7af6c5053063b",
        "type": "http request",
        "z": "9ce7dac9e84a1e3f",
        "g": "732cc625ddaa4208",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 630,
        "y": 480,
        "wires": [
            [
                "da8b8a4d2c8f3788",
                "db42e6d2e8a8bdfa"
            ]
        ]
    },
    {
        "id": "da8b8a4d2c8f3788",
        "type": "function",
        "z": "9ce7dac9e84a1e3f",
        "g": "732cc625ddaa4208",
        "name": "Initialize",
        "func": "if(msg.statusCode >= 400) {\n    flow.set(\"latest\",\"Error\");\n    node.error(\"Axis FTP responded \" + msg.statusCode,msg);\n    return;\n}\n\nflow.set(\"latest\",msg.payload);\n\nvar busy = flow.get(\"busy\") || false;\nflow.set(\"busy\",busy);\nflow.set(\"message\",\"Info updated\");\nif( flow.get(\"device\").authenticated === false )\n    flow.set(\"message\",\"Error: Device credentials unautorized.  Check user/password\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 540,
        "wires": [
            [
                "ebcbba783dd6d4de"
            ]
        ]
    },
    {
        "id": "7c73027af05bded5",
        "type": "link in",
        "z": "9ce7dac9e84a1e3f",
        "name": "link in 53",
        "links": [
            "ebcbba783dd6d4de",
            "e422fd5d80b7c5de",
            "b183868a9dbb9817"
        ],
        "x": 115,
        "y": 100,
        "wires": [
            [
                "d5726ae7b0a6edc7"
            ]
        ]
    },
    {
        "id": "ebcbba783dd6d4de",
        "type": "link out",
        "z": "9ce7dac9e84a1e3f",
        "name": "link out 41",
        "mode": "link",
        "links": [
            "7c73027af05bded5",
            "2ad219a35f2ef37b"
        ],
        "x": 1335,
        "y": 540,
        "wires": []
    },
    {
        "id": "7150098a0d4bcecb",
        "type": "comment",
        "z": "9ce7dac9e84a1e3f",
        "name": "Refresh",
        "info": "",
        "x": 1230,
        "y": 540,
        "wires": []
    },
    {
        "id": "af6719673b4ddb59",
        "type": "debug",
        "z": "9ce7dac9e84a1e3f",
        "name": "debug 246",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 140,
        "wires": []
    },
    {
        "id": "2f6b3399ebae022e",
        "type": "debug",
        "z": "9ce7dac9e84a1e3f",
        "name": "debug 247",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 300,
        "wires": []
    },
    {
        "id": "521c4c6f2e3a2259",
        "type": "debug",
        "z": "9ce7dac9e84a1e3f",
        "name": "debug 248",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 400,
        "wires": []
    },
    {
        "id": "d5726ae7b0a6edc7",
        "type": "function",
        "z": "9ce7dac9e84a1e3f",
        "name": "Message",
        "func": "var device = flow.get(\"device\");\n\nmsg.topic =\"axis/upgrade/\" + device.serial;\nmsg.payload = {\n    message: flow.get(\"message\"),\n    group: flow.get(\"group\") || \"Undefined\",\n    location: flow.get(\"location\") || \"Undefined\",\n    name: device.hostname,\n    serial: device.serial, \n    model: device.model,\n    firmware: device.firmware,\n    downloaded: flow.get(\"downloaded\"),\n    latest:  flow.get(\"latest\"),\n    timestamp: new Date().getTime()\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 100,
        "wires": [
            [
                "af6719673b4ddb59",
                "ad2fb95b329e9250"
            ]
        ]
    },
    {
        "id": "31b9c3ccdcc34083",
        "type": "change",
        "z": "9ce7dac9e84a1e3f",
        "g": "732cc625ddaa4208",
        "name": "Set Location and Group Here",
        "rules": [
            {
                "t": "set",
                "p": "location",
                "pt": "flow",
                "to": "TTC",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "group",
                "pt": "flow",
                "to": "Aintegration",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 240,
        "wires": [
            [
                "076ba23e2201f869"
            ]
        ]
    },
    {
        "id": "db42e6d2e8a8bdfa",
        "type": "debug",
        "z": "9ce7dac9e84a1e3f",
        "name": "debug 249",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 480,
        "wires": []
    },
    {
        "id": "c9bceb85e2774eb1",
        "type": "catch",
        "z": "9ce7dac9e84a1e3f",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 180,
        "y": 140,
        "wires": [
            [
                "1f5feff783f766bf"
            ]
        ]
    },
    {
        "id": "2ad219a35f2ef37b",
        "type": "link in",
        "z": "9ce7dac9e84a1e3f",
        "name": "link in 54",
        "links": [
            "ebcbba783dd6d4de"
        ],
        "x": 205,
        "y": 680,
        "wires": [
            [
                "964bee1f68b7ed53"
            ]
        ]
    },
    {
        "id": "964bee1f68b7ed53",
        "type": "function",
        "z": "9ce7dac9e84a1e3f",
        "g": "1893a4a4f2436617",
        "name": "Download latest?",
        "func": "var busy = flow.get(\"busy\") || false;\nif( busy )\n    return;\n    \nif( flow.get(\"latest\") === flow.get(\"downloaded\") )\n    return;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 680,
        "wires": [
            [
                "247a0c07e614b622"
            ]
        ]
    },
    {
        "id": "e9b22fb6943a14d6",
        "type": "function",
        "z": "9ce7dac9e84a1e3f",
        "g": "1893a4a4f2436617",
        "name": "Download",
        "func": "flow.set(\"message\",\"Downloading firmware version \" + flow.get(\"latest\") + \".\");\nflow.set(\"busy\",true);\n\nvar model = flow.get(\"device\").model.replace(/ /g, \"_\");\nvar url = \"http://ftp.axis.com/pub_soft/MPQT/\" + model + \"/latest/\" + model + \".bin\";\n\nmsg.payload = \"curl -o sdcard/firmware/firmware.bin \" + url;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 740,
        "wires": [
            [
                "d31e5f2ab12a2b15",
                "2bcce98904f9ed0f"
            ]
        ]
    },
    {
        "id": "e422fd5d80b7c5de",
        "type": "link out",
        "z": "9ce7dac9e84a1e3f",
        "name": "link out 42",
        "mode": "link",
        "links": [
            "7c73027af05bded5"
        ],
        "x": 1335,
        "y": 740,
        "wires": []
    },
    {
        "id": "b13fd130224421a1",
        "type": "function",
        "z": "9ce7dac9e84a1e3f",
        "g": "1893a4a4f2436617",
        "name": "Result",
        "func": "flow.set(\"busy\",false);\n\nif( msg.payload.code !== 0 ) {  //\n    flow.set(\"message\",\"Error: Firmware download failed\");\n    node.send([msg,null]);\n    return \n}\n\nflow.set(\"message\",\"Firmware \" + flow.get(\"latest\") + \" downloaded\");\nflow.set(\"downloaded\",flow.get(\"latest\"));\nmsg.payload =  flow.get(\"latest\");\nnode.send([null,msg]);\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 820,
        "wires": [
            [
                "0ff4a7e1a81eb8be"
            ],
            [
                "3c4556bdf2407a17"
            ]
        ]
    },
    {
        "id": "3c4556bdf2407a17",
        "type": "file",
        "z": "9ce7dac9e84a1e3f",
        "g": "1893a4a4f2436617",
        "name": "",
        "filename": "sdcard/firmware/ver.txt",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 800,
        "y": 840,
        "wires": [
            [
                "0ff4a7e1a81eb8be"
            ]
        ]
    },
    {
        "id": "1f5feff783f766bf",
        "type": "function",
        "z": "9ce7dac9e84a1e3f",
        "name": "Message",
        "func": "var device = flow.get(\"device\");\n\nmsg.topic =\"axis/upgrade/\" + device.serial;\nmsg.payload = {\n    message: \"Error: \" + msg.error.message,\n    group: flow.get(\"group\") || \"Undefined\",\n    location: flow.get(\"location\") || \"Undefined\",\n    name: device.hostname,\n    serial: device.serial, \n    model: device.model,\n    firmware: device.firmware,\n    downloaded: flow.get(\"downloaded\"),\n    latest:  flow.get(\"latest\"),\n    timestamp: new Date().getTime()\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 140,
        "wires": [
            [
                "ad2fb95b329e9250",
                "af6719673b4ddb59"
            ]
        ]
    },
    {
        "id": "e015b3fc8ee7db86",
        "type": "mqtt in",
        "z": "9ce7dac9e84a1e3f",
        "name": "",
        "topic": "axis/upgrade",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "971c147e8a96ed40",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 980,
        "wires": [
            [
                "efef4250fb78f421"
            ]
        ]
    },
    {
        "id": "efef4250fb78f421",
        "type": "function",
        "z": "9ce7dac9e84a1e3f",
        "g": "d94879c184b4f972",
        "name": "Check to see if upgrade applies",
        "func": "if( flow.get(\"busy\") )\n    return;\n\nif( flow.get(\"device\").firmware === flow.get(\"latest\"))\n    return;\n\nif( msg.payload.hasOwnProperty(\"location\") )\n    if( flow.get(\"location\") != msg.payload.location)\n        return;\n\nif( msg.payload.hasOwnProperty(\"group\") )\n    if( flow.get(\"group\") != msg.payload.group)\n        return;\n\nif( msg.payload.hasOwnProperty(\"model\") )\n    if( flow.get(\"device\").model != msg.payload.model )\n        return;\n\nif( msg.payload.hasOwnProperty(\"serial\") ) {\n    if( typeof msg.payload.serial === \"string\") {\n        if( msg.payload.serial !== flow.get(\"device\").serial) \n            return;\n    } else {\n        if( Array.isArray(msg.payload.serial) ) {\n            var match = false;\n            msg.payload.serial.forEach(function(item){\n                if( item === flow.get(\"device\").serial)\n                    match = true;\n            });\n            if( !match )\n                return;\n        }\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 980,
        "wires": [
            [
                "be46c464d00fafc4"
            ]
        ]
    },
    {
        "id": "be46c464d00fafc4",
        "type": "change",
        "z": "9ce7dac9e84a1e3f",
        "g": "d94879c184b4f972",
        "name": "Message",
        "rules": [
            {
                "t": "set",
                "p": "message",
                "pt": "flow",
                "to": "Firmware upgrade started",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "busy",
                "pt": "flow",
                "to": "true",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 980,
        "wires": [
            [
                "2b82e1efb2443622",
                "2de49737a603713c"
            ]
        ]
    },
    {
        "id": "b183868a9dbb9817",
        "type": "link out",
        "z": "9ce7dac9e84a1e3f",
        "name": "link out 43",
        "mode": "link",
        "links": [
            "7c73027af05bded5"
        ],
        "x": 1335,
        "y": 980,
        "wires": []
    },
    {
        "id": "b6d315811ae6fc71",
        "type": "comment",
        "z": "9ce7dac9e84a1e3f",
        "name": "Status",
        "info": "",
        "x": 1230,
        "y": 740,
        "wires": []
    },
    {
        "id": "0bde38e903aadec9",
        "type": "comment",
        "z": "9ce7dac9e84a1e3f",
        "name": "Status",
        "info": "",
        "x": 1230,
        "y": 980,
        "wires": []
    },
    {
        "id": "2de49737a603713c",
        "type": "change",
        "z": "9ce7dac9e84a1e3f",
        "g": "d94879c184b4f972",
        "name": "Firmware file",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sdcard/firmware/firmware.bin",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "sdcard/firmware/firmware.bin",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 1040,
        "wires": [
            [
                "6caa83c75bcdcbc4"
            ]
        ]
    },
    {
        "id": "6caa83c75bcdcbc4",
        "type": "Axis device",
        "z": "9ce7dac9e84a1e3f",
        "g": "d94879c184b4f972",
        "name": "",
        "preset": "a5d60ef5587cc8fc",
        "action": "Upgrade firmware",
        "cgi": "",
        "data": "",
        "options": "",
        "filename": "",
        "x": 630,
        "y": 1040,
        "wires": [
            [
                "b5c3388d9343d1b3"
            ]
        ]
    },
    {
        "id": "b5c3388d9343d1b3",
        "type": "change",
        "z": "9ce7dac9e84a1e3f",
        "g": "d94879c184b4f972",
        "name": "Message",
        "rules": [
            {
                "t": "set",
                "p": "message",
                "pt": "flow",
                "to": "Upgrade complete.  Restarting.",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "busy",
                "pt": "flow",
                "to": "false",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 1040,
        "wires": [
            [
                "2b82e1efb2443622"
            ]
        ]
    },
    {
        "id": "8ff7b09f18d667bc",
        "type": "catch",
        "z": "9ce7dac9e84a1e3f",
        "g": "d94879c184b4f972",
        "name": "",
        "scope": [
            "6caa83c75bcdcbc4"
        ],
        "uncaught": false,
        "x": 590,
        "y": 1100,
        "wires": [
            [
                "d68fae4ec75f8e6f"
            ]
        ]
    },
    {
        "id": "d68fae4ec75f8e6f",
        "type": "change",
        "z": "9ce7dac9e84a1e3f",
        "g": "d94879c184b4f972",
        "name": "Message",
        "rules": [
            {
                "t": "set",
                "p": "message",
                "pt": "flow",
                "to": "Error: Upgrade failed.",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "busy",
                "pt": "flow",
                "to": "false",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 1100,
        "wires": [
            [
                "2b82e1efb2443622"
            ]
        ]
    },
    {
        "id": "4fdaa93e2aca7265",
        "type": "comment",
        "z": "9ce7dac9e84a1e3f",
        "name": "Version 1.0.0",
        "info": "",
        "x": 170,
        "y": 40,
        "wires": []
    },
    {
        "id": "ecc8cd283f8d76cd",
        "type": "inject",
        "z": "9ce7dac9e84a1e3f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 640,
        "wires": [
            [
                "964bee1f68b7ed53"
            ]
        ]
    },
    {
        "id": "247a0c07e614b622",
        "type": "random",
        "z": "9ce7dac9e84a1e3f",
        "g": "1893a4a4f2436617",
        "name": "",
        "low": "1000",
        "high": "21600000",
        "inte": "true",
        "property": "payload",
        "x": 620,
        "y": 680,
        "wires": [
            [
                "7609a83bd8e0df2b"
            ]
        ]
    },
    {
        "id": "7366b5c2b1815026",
        "type": "function",
        "z": "9ce7dac9e84a1e3f",
        "g": "732cc625ddaa4208",
        "name": "Fix Model Name",
        "func": "  if( msg.payload.model === \"M3057\") msg.payload.model = \"M3057-PLVE\";\n  if( msg.payload.model === \"Q1645-LE\") msg.payload.model = \"Q1645\";\n  if( msg.payload.model === \"Q3517-LV\") msg.payload.model = \"Q3517\";\n  if( msg.payload.model === \"Q1615-LE Mk III\") msg.payload.model = \"Q1615\";\n  if( msg.payload.model === \"M3058\") msg.payload.model = \"M3058-PLVE\";\n  if( msg.payload.model === \"M3037-PVE\") msg.payload.model = \"M3037\";\n  if( msg.payload.model === \"Q1647-LE\") msg.payload.model = \"Q1647\";\n  if( msg.payload.model === \"M2026-LE-MkII\") msg.payload.model = \"M2026-LE_Mk_II\";\n  if( msg.payload.model === \"Q3518\") msg.payload.model = \"Q3518-LVE\";\n  if( msg.payload.model === \"M3045\") msg.payload.model = \"M3045-V\";\n  if( msg.payload.model === \"Q3515-LVE\") msg.payload.model = \"Q3515\";\n  if( msg.payload.model === \"M3106-LVE MkII\") msg.payload.model = \"M3106-LVE_Mk_II\";\n  if( msg.payload.model === \"FA51-B\") msg.payload.model = \"FA51\";\n  if( msg.payload.model === \"M1137-E\") msg.payload.model = \"M1137\";\n  if( msg.payload.model === \"Q3517-LVE\") msg.payload.model = \"Q3517\";\n  if( msg.payload.model === \"Q3515-LV\") msg.payload.model = \"Q3515\";\n  if( msg.payload.model === \"M3106-L-MkII\") msg.payload.model = \"M3106-L_Mk_II\";\n  if( msg.payload.model === \"Q3517-SLVE\") msg.payload.model = \"Q3517\";\n  if( msg.payload.model === \"M1135-E\") msg.payload.model = \"M1135\";\n  if( msg.payload.model === \"C Cube L\") msg.payload.model = \"Companion_Cube_L\";\n  if( msg.payload.model === \"Q1656-BLE\") msg.payload.model = \"Q1656-LE\";\n  if( msg.payload.model === \"A1210-B\") msg.payload.model = \"A1210\";\n  if( msg.payload.model === \"M1135 Mk II\") msg.payload.model = \"M1135\";\n  if( msg.payload.model === \"Q1656-BE\") msg.payload.model = \"Q1656\";\n  if( msg.payload.model === \"C Dome V\") msg.payload.model = \"Companion_Dome_WV\";\n  if( msg.payload.model === \"C Dome WV\") msg.payload.model = \"Companion_Dome_WV\";\n  if( msg.payload.model === \"M1137-E\") msg.payload.model = \"M1137_Mk_II\";\n  if( msg.payload.model === \"C1211-E\") msg.payload.model = \"C1211\";\n  if( msg.payload.model === \"Q1656-B\") msg.payload.model = \"Q1656\";\n  if( msg.payload.model === \"Q1656-DLE\") msg.payload.model = \"Q1656-LE\";\n  if( msg.payload.model === \"M1135-E Mk II\") msg.payload.model = \"M1135_Mk_II\";\n  if( msg.payload.model === \"M1137-E\") msg.payload.model = \"M1137_Mk_II\";\n  if( msg.payload.model === \"P3267-LVE Mk II\") msg.payload.model = \"P3267-LVE\";\n  if( msg.payload.model === \"C1210\") msg.payload.model = \"C1210-E\";\n  ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 300,
        "wires": [
            [
                "9d2ead3077ef7dc1"
            ]
        ]
    },
    {
        "id": "34ae4d5758734645",
        "type": "comment",
        "z": "9ce7dac9e84a1e3f",
        "name": "Status",
        "info": "",
        "x": 210,
        "y": 100,
        "wires": []
    },
    {
        "id": "971c147e8a96ed40",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "",
        "port": "1883",
        "tls": "de066b1f191c3657",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "a5d60ef5587cc8fc",
        "type": "Device Access",
        "name": "Localhost",
        "address": "localhost",
        "protocol": "http"
    },
    {
        "id": "de066b1f191c3657",
        "type": "tls-config",
        "name": "Verify",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    }
]
