[
    {
        "id": "e6c791a3c95538d5",
        "type": "tab",
        "label": "FW Upgrade MQTT",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8e41e19b0a2943e1",
        "type": "junction",
        "z": "e6c791a3c95538d5",
        "x": 980,
        "y": 180,
        "wires": [
            [
                "2bffb7569fc2a14b",
                "0b9d58878d934c0d"
            ]
        ]
    },
    {
        "id": "a8837e129d825ab2",
        "type": "exec",
        "z": "e6c791a3c95538d5",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 650,
        "y": 300,
        "wires": [
            [],
            [],
            [
                "8e2a30a38be7a1d6",
                "5effa66b454b97e9"
            ]
        ]
    },
    {
        "id": "8e2a30a38be7a1d6",
        "type": "switch",
        "z": "e6c791a3c95538d5",
        "name": "Download success",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 470,
        "y": 360,
        "wires": [
            [
                "5ba9135cad49339a",
                "ac78ca74330b8530"
            ]
        ]
    },
    {
        "id": "ac78ca74330b8530",
        "type": "Axis device",
        "z": "e6c791a3c95538d5",
        "name": "",
        "preset": "a5d60ef5587cc8fc",
        "action": "Upgrade firmware",
        "cgi": "",
        "data": "",
        "options": "",
        "filename": "sdcard/firmware.bin",
        "x": 470,
        "y": 420,
        "wires": [
            [
                "81fda3d417c4f219"
            ]
        ]
    },
    {
        "id": "f577e45b3ed9e4b5",
        "type": "catch",
        "z": "e6c791a3c95538d5",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 680,
        "y": 480,
        "wires": [
            [
                "22f15887ced2b647"
            ]
        ]
    },
    {
        "id": "34c8e6b7bc3447c3",
        "type": "mqtt in",
        "z": "e6c791a3c95538d5",
        "name": "",
        "topic": "axis/upgrade",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "3f28e5600fc06ca8",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 180,
        "wires": [
            [
                "6fd67b247138f6a6"
            ]
        ]
    },
    {
        "id": "6fd67b247138f6a6",
        "type": "function",
        "z": "e6c791a3c95538d5",
        "name": "Validate",
        "func": "msg.request = msg.payload;\nvar device = global.get(\"device\");\nif (!device) {\n    msg.topic = \"axis/upgrade/error/undefined\"\n    msg.payload = \"Unknown device type\";\n    node.send([msg,null]);\n    return;\n}\n\nif (msg.payload.hasOwnProperty(\"model\") && msg.payload.model !== device.model )\n    return;  //Ignore\n\nif (msg.payload.hasOwnProperty(\"version\") && msg.payload.version === device.firmware ) {\n    msg.topic = \"axis/upgrade/success/\" + device.serial;\n    msg.payload = \"Firmware \" + msg.payload.version + \" is already installed\";\n    node.send([msg,null]);\n    return; //No need to upgrade\n}\n\nif (!msg.payload.hasOwnProperty(\"url\")) {\n    msg.topic = \"/axis/upgrade/error/\" + device.serial;\n    msg.payload = \"No URL provided\";\n    node.send([msg, null]);\n    return;\n}    \n\nvar upgrade = true;\nif( msg.payload.hasOwnProperty(\"targets\") ) {\n    upgrade = false;\n    if( typeof msg.payload.targets === \"string\" && msg.payload.serial === device.serial )\n        upgrade = true;\n    if ( Array.isArray(msg.payload.target ) ) {\n        msg.payload.target.forEach(function(serial) {\n            if( device.serial === serial )\n                upgrade = true;\n        });      \n    }\n}\n\nif( !upgrade )\n    return; //No targeting this device\n\nmsg.topic = \"axis/upgrade/status\"\nmsg.payload = \"Downloading file\";\n\nnode.send([null,msg]);\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 180,
        "wires": [
            [
                "8e41e19b0a2943e1",
                "312a3e7b378eb8a0"
            ],
            [
                "4a8bf27136e3964b"
            ]
        ]
    },
    {
        "id": "3056a30b06f46219",
        "type": "function",
        "z": "e6c791a3c95538d5",
        "name": "curl download",
        "func": "msg.payload = \"curl -o sdcard/firmware.bin \" + msg.request.url;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 300,
        "wires": [
            [
                "a8837e129d825ab2"
            ]
        ]
    },
    {
        "id": "2bffb7569fc2a14b",
        "type": "mqtt out",
        "z": "e6c791a3c95538d5",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3f28e5600fc06ca8",
        "x": 1130,
        "y": 180,
        "wires": []
    },
    {
        "id": "5effa66b454b97e9",
        "type": "function",
        "z": "e6c791a3c95538d5",
        "name": "Error",
        "func": "if( msg.payload.code === 0 ) //Firmware download OK\n    return;\nmsg.topic = \"axis/upgrade/error/\" + global.get(\"device\").serial;\nmsg.payload = \"Firmware download failed.\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 300,
        "wires": [
            [
                "8e41e19b0a2943e1"
            ]
        ]
    },
    {
        "id": "5ba9135cad49339a",
        "type": "function",
        "z": "e6c791a3c95538d5",
        "name": "status",
        "func": "msg.topic = \"axis/upgrade/status/\" + global.get(\"device\").serial;\nmsg.payload = \"Firmware downloaded.  Starting upgrade\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 360,
        "wires": [
            [
                "8e41e19b0a2943e1"
            ]
        ]
    },
    {
        "id": "0339c1652d03e93a",
        "type": "function",
        "z": "e6c791a3c95538d5",
        "name": "success",
        "func": "msg.topic = \"axis/upgrade/success/\" + global.get(\"device\").serial;\nmsg.payload = \"Upgrade complete.  Restarting device\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 420,
        "wires": [
            [
                "8e41e19b0a2943e1"
            ]
        ]
    },
    {
        "id": "22f15887ced2b647",
        "type": "function",
        "z": "e6c791a3c95538d5",
        "name": "status",
        "func": "msg.topic = \"axis/upgrade/error/\" + global.get(\"device\").serial;\nmsg.payload = \"Firmware upgrade failed\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 480,
        "wires": [
            [
                "8e41e19b0a2943e1"
            ]
        ]
    },
    {
        "id": "3688d3deb206923e",
        "type": "comment",
        "z": "e6c791a3c95538d5",
        "name": "Version 1.2 [README]",
        "info": "# Upgrade command\nTopic: axis Upgrade\nPayload : {\n   url: \"http://path.to/firmware/file.bin\",\n   model: \"ModelName\",     //Optional.  Only upgrade if model match\n   version: \"1.2.3\",       //Optional.  Only upgrade if device firmware does not match \"1.2.3\"\n   target: \"SERIALNUMBER\"  //Optional. String or array of strings.  Only upgrade if target matches device id\n}\n\n# Response topics\naxis/upgrade/success/SERIAL   Payload [Object] device info\naxis/upgrade/statsus/SERIAL   Payload [String] Status\naxis/upgrade/error/SERIAL     Payload [String] Reason\n\n",
        "x": 290,
        "y": 40,
        "wires": []
    },
    {
        "id": "b85f519dcde59d65",
        "type": "inject",
        "z": "e6c791a3c95538d5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 100,
        "wires": [
            [
                "0b0328220cdbfccb"
            ]
        ]
    },
    {
        "id": "0b0328220cdbfccb",
        "type": "change",
        "z": "e6c791a3c95538d5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "user",
                "pt": "msg",
                "to": "root",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "password",
                "pt": "msg",
                "to": "pass",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 100,
        "wires": [
            [
                "a20a4735da4c38a3"
            ]
        ]
    },
    {
        "id": "a20a4735da4c38a3",
        "type": "Axis device",
        "z": "e6c791a3c95538d5",
        "name": "",
        "preset": "a5d60ef5587cc8fc",
        "action": "Device Info",
        "cgi": "",
        "data": "",
        "options": "",
        "filename": "",
        "x": 620,
        "y": 100,
        "wires": [
            [
                "26540eb9e5b6e9a5"
            ]
        ]
    },
    {
        "id": "26540eb9e5b6e9a5",
        "type": "change",
        "z": "e6c791a3c95538d5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "device",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "axis/upgrade/device",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 100,
        "wires": [
            [
                "8e41e19b0a2943e1"
            ]
        ]
    },
    {
        "id": "81fda3d417c4f219",
        "type": "Axis device",
        "z": "e6c791a3c95538d5",
        "name": "",
        "preset": "a5d60ef5587cc8fc",
        "action": "Device Info",
        "cgi": "",
        "data": "",
        "options": "",
        "filename": "",
        "x": 690,
        "y": 420,
        "wires": [
            [
                "0339c1652d03e93a"
            ]
        ]
    },
    {
        "id": "4b3c6a3f6a16cb2e",
        "type": "debug",
        "z": "e6c791a3c95538d5",
        "name": "debug 214",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 60,
        "wires": []
    },
    {
        "id": "4a8bf27136e3964b",
        "type": "function",
        "z": "e6c791a3c95538d5",
        "name": "status",
        "func": "msg.topic = \"axis/upgrade/status/\" + global.get(\"device\").serial;\nmsg.payload = \"Preparing upgrade.  Starting download\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 240,
        "wires": [
            [
                "8e41e19b0a2943e1",
                "3056a30b06f46219"
            ]
        ]
    },
    {
        "id": "0b9d58878d934c0d",
        "type": "debug",
        "z": "e6c791a3c95538d5",
        "name": "debug 215",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 240,
        "wires": []
    },
    {
        "id": "312a3e7b378eb8a0",
        "type": "debug",
        "z": "e6c791a3c95538d5",
        "name": "debug 216",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 160,
        "wires": []
    },
    {
        "id": "a5d60ef5587cc8fc",
        "type": "Device Access",
        "name": "Localhost",
        "address": "localhost",
        "protocol": "http"
    },
    {
        "id": "3f28e5600fc06ca8",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "10.13.8.20",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]
