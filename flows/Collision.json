[
    {
        "id": "378f2327429a44b8",
        "type": "tab",
        "label": "Collision",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1fd4f651a05150d4",
        "type": "ui_template",
        "z": "378f2327429a44b8",
        "group": "4eafaab05dee70e7",
        "name": "Augmented Video and Selectbox",
        "order": 0,
        "width": "16",
        "height": "9",
        "format": "<link rel=\"stylesheet\" href=\"/css/imgareaselect-default.css\">\n<script src=\"/js/media-stream-player.min.js\"></script>\n<script src=\"/js/jquery.imgareaselect.js\"></script>\n\n<div id=\"view\" style=\"width:800px; height:450px;\">\n    <div id=\"{{'canvas_'+$id}}\" style=\"width:100%; height:100%; position:relative\">\n        <img id=\"{{'image_'+$id}}\" class=\"card-img-top\" src=\"\" alt=\"Image\" style=\"width:100%; height:100%; position:absolute; top:0px; left:0px;\">\n        <div id=\"{{'video_'+$id}}\" style=\"width:100%; height:100%; position:absolute; top:0px; left:0px;\"></div>\n        <canvas id=\"{{'objects_'+$id}}\" width=\"1000\" height=\"1000\" style=\"width:100%; height:100%; position:absolute; top:0px; left:0px;\"></canvas>\n</div>\n\n<script>\nvar imageWidth = 1280;\nvar imageHeight = 720;\nvar viewWidth = 800;\nvar viewHeight = 450;\nvar selectBox = null;\nvar hold = false;\nvar boxId = \"None\";\n\nfunction drawVehicles( objects, scope ) {\n    if(!objects)\n      return;\n    var canvas = document.getElementById(\"objects_\"+scope.$id);\n    var ctx = canvas.getContext(\"2d\");\n\n    ctx.beginPath();\n    ctx.clearRect(0, 0, 1000, 1000 );\n    ctx.stroke();\n    ctx.font = \"30px Arial\";\n    ctx.fillStyle = '#FFFF00';\n    ctx.strokeStyle = '#FFFF00';\n    ctx.beginPath();\n    for( var id in objects ) {\n          ctx.rect(objects[id].x, objects[id].y, objects[id].w, objects[id].h);\n          ctx.fillText( objects[id].class + ' (' + objects[id].confidence + ')', objects[id].x, objects[id].y-10);\n    };\n    ctx.stroke();\n}\n\nfunction drawHumans( objects, scope ) {\n    if(!objects)\n      return;\n    var canvas = document.getElementById(\"objects_\"+scope.$id);\n    var ctx = canvas.getContext(\"2d\");\n\n    ctx.font = \"30px Arial\";\n    ctx.fillStyle = '#00FFFF';\n    ctx.strokeStyle = '#00FFFF';\n    ctx.beginPath();\n    for( var id in objects ) {\n          ctx.rect(objects[id].x, objects[id].y, objects[id].w, objects[id].h);\n          ctx.fillText( objects[id].class + ' (' + objects[id].confidence + ')', objects[id].x, objects[id].y+objects[id].h-10);\n    };\n    ctx.stroke();\n}\n\n\n(function(scope) {\n  scope.$watch('msg', function(msg) {\n    if (!msg)\n      return;\n    console.log(msg.topic);\n    if( msg.topic === \"video\" ) {\n        width = msg.width || 1280;\n        height = msg.height || 720;\n        if( selectBox )\n            selectBox.setOptions({hide: true});\n\n        $(\"#image_\"+scope.$id).attr('src','http://'+window.location.hostname+'/axis-cgi/jpg/image.cgi?_='+new Date().getTime());\n        $(\"#video_\"+scope.$id).empty();\n        if( msg.payload ) {\n          var player = '<media-stream-player hostname=\"'+window.location.hostname+'\" format=\"RTP_H264\" compression=\"40\" audio=\"0\" resolution=\"'+width+'x'+height+'\" variant=\"basic\" autoplay></media-stream-player>';\n          $(\"#video_\"+scope.$id).append(player);\n        }\n    }\n\n    if( msg.topic === \"objects\" ) {\n      drawVehicles( msg.payload.vehicles, scope );\n      drawHumans( msg.payload.humans, scope );\n    }\n\n    if( msg.topic === \"box\") {\n        if( selectBox ) {\n          selectBox.setOptions({hide: true});\n          delete selectBox;\n          selectBox = 0;\n        }\n\n        if( typeof msg.payload !== \"object\" )\n          return;\n        boxId = msg.payload.id || \"None\";\n        selectBox = $(\"#image_\"+scope.$id).imgAreaSelect({\n            x1: parseInt((msg.payload.x1 / 1000) * viewWidth),\n            y1: parseInt((msg.payload.y1 / 1000) * viewHeight),\n            x2: parseInt((msg.payload.x2 / 1000) * viewWidth),\n            y2: parseInt((msg.payload.y2 / 1000) * viewHeight),\n            minHeight: 20,\n            minWidth: 20,\n            handles: true,\n            enable:true,movable:true,resizable:true,show:true,\n            instance: true,\n            onSelectEnd: function( image, area ) {\n                var box = {\n                    x1: parseInt((area.x1 / viewWidth) * 1000),\n                    x2: parseInt((area.x2 / viewWidth) * 1000),\n                    y1: parseInt((area.y1 / viewHeight) * 1000),\n                    y2: parseInt((area.y2 / viewHeight) * 1000)\n                }\n                scope.send({topic:boxId ||\"none\",payload:box});\n            }\n        });\n        selectBox.setOptions({show: true});\n    }\n  });\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 460,
        "y": 580,
        "wires": [
            [
                "e86b80435a51da66"
            ]
        ]
    },
    {
        "id": "56e3e6ed56ac8761",
        "type": "ui_button",
        "z": "378f2327429a44b8",
        "name": "",
        "group": "4eafaab05dee70e7",
        "order": 1,
        "width": "4",
        "height": "1",
        "passthru": false,
        "label": "play",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "video",
        "topicType": "str",
        "x": 190,
        "y": 580,
        "wires": [
            [
                "1fd4f651a05150d4"
            ]
        ]
    },
    {
        "id": "e86b80435a51da66",
        "type": "function",
        "z": "378f2327429a44b8",
        "name": "Parking bounding box",
        "func": "var parkings = flow.get(\"parkings\") || [];\nvar id = msg.topic;\n\nparkings.forEach(function(item){\n    if( item.id === id ) {\n        item.x1 = msg.payload.x1;\n        item.x2 = msg.payload.x2;\n        item.y1 = msg.payload.y1;\n        item.y2 = msg.payload.y2;\n    }\n})\n\nflow.set(\"parkings\", parkings);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "392f41805d89c10e",
        "type": "function",
        "z": "378f2327429a44b8",
        "name": "Scene Objects",
        "func": "var detections = msg.payload.detections;\nvar confidence = flow.get(\"confidence\") || 50;\n\nvar vehicles = flow.get(\"vehicles\") || {};\nvar humans = flow.get(\"humans\") || {};\n\ndetections.forEach(function(detection) {\n    if( detection.confidence < confidence )\n        return;\n\n    detection.timestamp = new Date().getTime();\n\n    if( detection.class === \"Face\")\n        return;\n\n    if( detection.class === \"Car\" || detection.class === \"Truck\" || detection.class === \"Bus\" || detection.class === \"Motorcycle\" || detection.class === \"Vehicle\" )\n        vehicles[detection.id] = detection;\n\n    if( detection.class === \"License plate\")\n        return;\n\n    if( detection.class === \"Object\")\n        return;\n\n    if( detection.class === \"Human\")\n        humans[detection.id] = detection;\n\n})\n\nflow.set(\"humans\",humans);\nflow.set(\"vehicles\",vehicles);\n\nmsg.topic = \"objects\";\nmsg.payload = {\n    vehicles: vehicles,\n    humans: humans\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 80,
        "wires": [
            [
                "e4501c0d2b595753",
                "88d60eb795cc4660"
            ]
        ]
    },
    {
        "id": "8d72f196a59ce718",
        "type": "Objects",
        "z": "378f2327429a44b8",
        "output": "1",
        "classFilter": "-1",
        "confidence": "50",
        "rotation": "0",
        "cog": "1",
        "predictions": "1",
        "x": 240,
        "y": 80,
        "wires": [
            [
                "392f41805d89c10e",
                "5e640267a065b828"
            ]
        ]
    },
    {
        "id": "14e459b9994a6018",
        "type": "ui_numeric",
        "z": "378f2327429a44b8",
        "name": "",
        "label": "Confidence",
        "tooltip": "",
        "group": "f5516dde285a4f6d",
        "order": 2,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "120",
        "step": "10",
        "className": "",
        "x": 650,
        "y": 380,
        "wires": [
            [
                "ecc84858c127480f"
            ]
        ]
    },
    {
        "id": "ecc84858c127480f",
        "type": "change",
        "z": "378f2327429a44b8",
        "name": "flow.confidence",
        "rules": [
            {
                "t": "set",
                "p": "confidence",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "704325c0aa35e63c",
        "type": "inject",
        "z": "378f2327429a44b8",
        "name": "Node-RED Started",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 380,
        "wires": [
            [
                "23643048a21903d2",
                "2524292521b0c803"
            ]
        ]
    },
    {
        "id": "23643048a21903d2",
        "type": "function",
        "z": "378f2327429a44b8",
        "name": "confidence",
        "func": "msg.payload = flow.get(\"confidence\") || 50;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 380,
        "wires": [
            [
                "14e459b9994a6018"
            ]
        ]
    },
    {
        "id": "4fd57ad35d9e2e86",
        "type": "function",
        "z": "378f2327429a44b8",
        "name": "Tab: Collision",
        "func": "msg.topic = \"video\";\n\nif( msg.payload !== \"change\" )\n    return;\nif( msg.name === \"Collision\" )\n    msg.payload = true;\nelse\n    msg.payload = false;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 280,
        "wires": [
            [
                "1c66e07fa5222635",
                "55eb6f75943454f1"
            ]
        ]
    },
    {
        "id": "65261c8d5ca7f228",
        "type": "ui_ui_control",
        "z": "378f2327429a44b8",
        "name": "",
        "events": "all",
        "x": 220,
        "y": 280,
        "wires": [
            [
                "4fd57ad35d9e2e86",
                "633835917acee535"
            ]
        ]
    },
    {
        "id": "d25eb1061be6c92e",
        "type": "link in",
        "z": "378f2327429a44b8",
        "name": "link in 11",
        "links": [
            "1c66e07fa5222635",
            "6e7749d852998c51",
            "52863cf447d850f8",
            "dfec3bf41706449b",
            "679986952f4eb2c8",
            "659a695129e680cf",
            "57a310f8a33dfa6b",
            "e4501c0d2b595753"
        ],
        "x": 155,
        "y": 540,
        "wires": [
            [
                "1fd4f651a05150d4"
            ]
        ]
    },
    {
        "id": "1c66e07fa5222635",
        "type": "link out",
        "z": "378f2327429a44b8",
        "name": "link out 11",
        "mode": "link",
        "links": [
            "d25eb1061be6c92e",
            "861c717c44f8c0df"
        ],
        "x": 615,
        "y": 280,
        "wires": []
    },
    {
        "id": "633835917acee535",
        "type": "debug",
        "z": "378f2327429a44b8",
        "name": "debug 24",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 320,
        "wires": []
    },
    {
        "id": "55eb6f75943454f1",
        "type": "delay",
        "z": "378f2327429a44b8",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 650,
        "y": 320,
        "wires": [
            [
                "bb604daae169b132"
            ]
        ]
    },
    {
        "id": "bb604daae169b132",
        "type": "link out",
        "z": "378f2327429a44b8",
        "name": "link out 16",
        "mode": "link",
        "links": [
            "99c59969e7a56918",
            "116ac8c2f813389e",
            "36f8d8cea8db5024",
            "c418b54fafe13cb7"
        ],
        "x": 815,
        "y": 320,
        "wires": []
    },
    {
        "id": "e4501c0d2b595753",
        "type": "link out",
        "z": "378f2327429a44b8",
        "name": "link out 17",
        "mode": "link",
        "links": [
            "d25eb1061be6c92e"
        ],
        "x": 675,
        "y": 80,
        "wires": []
    },
    {
        "id": "88d60eb795cc4660",
        "type": "debug",
        "z": "378f2327429a44b8",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 120,
        "wires": []
    },
    {
        "id": "5e640267a065b828",
        "type": "debug",
        "z": "378f2327429a44b8",
        "name": "debug 26",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 120,
        "wires": []
    },
    {
        "id": "f6ca51e4dcedc0e8",
        "type": "inject",
        "z": "378f2327429a44b8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 180,
        "wires": [
            [
                "c764109f26d20e9e"
            ]
        ]
    },
    {
        "id": "c764109f26d20e9e",
        "type": "function",
        "z": "378f2327429a44b8",
        "name": "Process",
        "func": "var now = new Date().getTime();\nvar minDistance = flow.get(\"distance\") || 10;\nvar state = flow.get(\"state\") || false;\n\nvar objects = flow.get(\"vehicles\") || {};\nvar vehicles = {};\nfor( var id in objects ) {\n    if( now - vehicles.timsstamp < 5000 )\n        vehicles[id] = objects[id];\n}\n\nvar objects = flow.get(\"humans\") || {};\nvar humans = {};\nfor( var id in objects ) {\n    if( now - vehicles.timsstamp < 5000 )\n        humans[id] = objects[id];\n}\n\nvar smallestDistance = 100;\nfor(var vId in vehicles ) {\n    for( var hId in humans ) {\n        var dx = vehicles[vId].cx - humans[hId].cx;\n        var dy = vehicles[vId].cy - humans[hId].cy;\n        var distance = Math.sqrt((dx*dx)+(dy*dy));\n        if(distance < smallestDistance )\n            smallestDistance = distance;\n    }\n}\n\nif( smallestDistance < minDistance ) {\n    if( state === false ) {\n        state = true;\n        msg.payload = {\n            distance: smallestDistance,\n            state: state,\n            timestamp: new Date()            \n        };\n        node.send(msg);\n    }\n} else {\n    if( state === true ) {\n        state = false;\n        msg.payload = {\n            distance: smallestDistance,\n            state: state,\n            timestamp: new Date()\n        };\n        node.send(msg);\n    }\n}\n\nflow.set(\"state\",state);\nflow.set(\"humans\",humans);\nflow.set(\"vehicles\", vehicles);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 180,
        "wires": [
            [
                "cbba61af144600e3"
            ]
        ]
    },
    {
        "id": "68fef8a00a99876f",
        "type": "ui_numeric",
        "z": "378f2327429a44b8",
        "name": "",
        "label": "Distance",
        "tooltip": "",
        "group": "f5516dde285a4f6d",
        "order": 2,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "5",
        "max": "100",
        "step": "5",
        "className": "",
        "x": 640,
        "y": 420,
        "wires": [
            [
                "aa907fe5802ab896"
            ]
        ]
    },
    {
        "id": "aa907fe5802ab896",
        "type": "change",
        "z": "378f2327429a44b8",
        "name": "flow.confidence",
        "rules": [
            {
                "t": "set",
                "p": "distance",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "2524292521b0c803",
        "type": "function",
        "z": "378f2327429a44b8",
        "name": "confidence",
        "func": "msg.payload = flow.get(\"distance\") || 50;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 420,
        "wires": [
            [
                "68fef8a00a99876f"
            ]
        ]
    },
    {
        "id": "cbba61af144600e3",
        "type": "function",
        "z": "378f2327429a44b8",
        "name": "LOG",
        "func": "var events = flow.get(\"events\") || [];\nevents.push(msg.payload);\nflow.set(\"events\",events);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "4eafaab05dee70e7",
        "type": "ui_group",
        "name": "Video",
        "tab": "0840435a59f33c79",
        "order": 2,
        "disp": false,
        "width": "16",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f5516dde285a4f6d",
        "type": "ui_group",
        "name": "Control",
        "tab": "0840435a59f33c79",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0840435a59f33c79",
        "type": "ui_tab",
        "name": "Collision",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]
