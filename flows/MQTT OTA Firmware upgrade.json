[
    {
        "id": "c63bc39f465d44a2",
        "type": "tab",
        "label": "FW Upgrade MQTT",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d6ed0e9149ec4793",
        "type": "junction",
        "z": "c63bc39f465d44a2",
        "x": 980,
        "y": 180,
        "wires": [
            [
                "29bec3708375e2de",
                "7f2a577ab3f23d86"
            ]
        ]
    },
    {
        "id": "c911c1c9020205e5",
        "type": "exec",
        "z": "c63bc39f465d44a2",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 570,
        "y": 260,
        "wires": [
            [],
            [],
            [
                "2a41a7f8b71597c0",
                "7f1e09c8f7700585"
            ]
        ]
    },
    {
        "id": "2a41a7f8b71597c0",
        "type": "switch",
        "z": "c63bc39f465d44a2",
        "name": "Download success",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 390,
        "y": 320,
        "wires": [
            [
                "1386759ce41d3cee",
                "5c77fc4fc7766d6b"
            ]
        ]
    },
    {
        "id": "5c77fc4fc7766d6b",
        "type": "Axis device",
        "z": "c63bc39f465d44a2",
        "name": "",
        "preset": "a5d60ef5587cc8fc",
        "action": "Upgrade firmware",
        "cgi": "",
        "data": "",
        "options": "",
        "filename": "sdcard/firmware.bin",
        "x": 390,
        "y": 380,
        "wires": [
            [
                "51c6078c81da1e10"
            ]
        ]
    },
    {
        "id": "f45daed352466689",
        "type": "catch",
        "z": "c63bc39f465d44a2",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 600,
        "y": 440,
        "wires": [
            [
                "7b7b107bdc9d3061"
            ]
        ]
    },
    {
        "id": "2ac81262b79b1b30",
        "type": "mqtt in",
        "z": "c63bc39f465d44a2",
        "name": "",
        "topic": "axis/upgrade",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "d1d53d1e87be4083",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 180,
        "wires": [
            [
                "aef3efcbde359e5d"
            ]
        ]
    },
    {
        "id": "aef3efcbde359e5d",
        "type": "function",
        "z": "c63bc39f465d44a2",
        "name": "Validate",
        "func": "var device = global.get(\"device\");\nif (!device) {\n    msg.topic = \"axis/upgrade/error/undefined\"\n    msg.payload = \"Unknown device type\";\n    node.send([msg,null]);\n    return;\n}\n\nif (msg.payload.hasOwnProperty(\"model\") && msg.payload.model !== device.model )\n    return;  //Ignore\n\nif (msg.payload.hasOwnProperty(\"version\") && msg.payload.version === device.firmware ) {\n    msg.topic = \"axis/upgrade/success/\" + device.serial;\n    msg.payload = device;\n    node.send([msg.payload,null]);\n    return; //No need to upgrade\n}\n\nif (!msg.payload.hasOwnProperty(\"url\")) {\n    msg.topic = \"/axis/upgrade/error/\" + device.serial;\n    msg.payload = \"No URL provided\";\n    node.send([msg.payload, null]);\n    return;\n}    \n\nvar upgrade = true;\nif( msg.payload.hasOwnProperty(\"targets\") ) {\n    upgrade = false;\n    if( typeof msg.payload.targets === \"string\" && msg.payload.serial === device.serial )\n        upgrade = true;\n    if ( Array.isArray(msg.payload.target ) ) {\n        msg.payload.target.forEach(function(serial) {\n            if( device.serial === serial )\n                upgrade = true;\n        });      \n    }\n}\n\nif( !upgrade )\n    return; //No targeting this device\n\nnode.send([null,msg]);\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 180,
        "wires": [
            [
                "06221a53b1692f13",
                "d6ed0e9149ec4793"
            ],
            []
        ]
    },
    {
        "id": "06221a53b1692f13",
        "type": "function",
        "z": "c63bc39f465d44a2",
        "name": "curl download",
        "func": "msg.payload = \"curl -o sdcard/firmware.bin \" + msg.payload.url;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 260,
        "wires": [
            [
                "c911c1c9020205e5"
            ]
        ]
    },
    {
        "id": "29bec3708375e2de",
        "type": "mqtt out",
        "z": "c63bc39f465d44a2",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d1d53d1e87be4083",
        "x": 1130,
        "y": 180,
        "wires": []
    },
    {
        "id": "7f1e09c8f7700585",
        "type": "function",
        "z": "c63bc39f465d44a2",
        "name": "Error",
        "func": "if( msg.payload.code === 0 ) //Firmware download OK\n    return;\nmsg.topic = \"axis/upgrade/error/\" + global.get(\"device\").serial;\nmsg.payload = \"Firmware download failed.\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 260,
        "wires": [
            [
                "d6ed0e9149ec4793"
            ]
        ]
    },
    {
        "id": "1386759ce41d3cee",
        "type": "function",
        "z": "c63bc39f465d44a2",
        "name": "status",
        "func": "msg.topic = \"axis/upgrade/status/\" + global.get(\"device\").serial;\nmsg.payload = \"Firmware downloaded.  Starting upgrade\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 320,
        "wires": [
            [
                "d6ed0e9149ec4793"
            ]
        ]
    },
    {
        "id": "24c0dbf9eb01a044",
        "type": "function",
        "z": "c63bc39f465d44a2",
        "name": "success",
        "func": "msg.topic = \"axis/upgrade/success/\" + global.get(\"device\").serial;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 380,
        "wires": [
            [
                "d6ed0e9149ec4793"
            ]
        ]
    },
    {
        "id": "7b7b107bdc9d3061",
        "type": "function",
        "z": "c63bc39f465d44a2",
        "name": "status",
        "func": "msg.topic = \"axis/upgrade/error/\" + global.get(\"device\").serial;\nmsg.payload = \"Firmware upgrade failed\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 440,
        "wires": [
            [
                "d6ed0e9149ec4793"
            ]
        ]
    },
    {
        "id": "7f2a577ab3f23d86",
        "type": "debug",
        "z": "c63bc39f465d44a2",
        "name": "debug 206",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 240,
        "wires": []
    },
    {
        "id": "c21643b120b15565",
        "type": "comment",
        "z": "c63bc39f465d44a2",
        "name": "Version 1.1 [README]",
        "info": "# Upgrade command\nTopic: axis Upgrade\nPayload : {\n   url: \"http://path.to/firmware/file.bin\",\n   model: \"ModelName\",     //Optional.  Only upgrade if model match\n   version: \"1.2.3\",       //Optional.  Only upgrade if device firmware does not match \"1.2.3\"\n   target: \"SERIALNUMBER\"  //Optional. String or array of strings.  Only upgrade if target matches device id\n}\n\n# Response topics\naxis/upgrade/success/SERIAL   Payload [Object] device info\naxis/upgrade/statsus/SERIAL   Payload [String] Status\naxis/upgrade/error/SERIAL     Payload [String] Reason\n\n",
        "x": 290,
        "y": 40,
        "wires": []
    },
    {
        "id": "bcefa6de56682d6d",
        "type": "inject",
        "z": "c63bc39f465d44a2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 100,
        "wires": [
            [
                "d21709c87543b211"
            ]
        ]
    },
    {
        "id": "d21709c87543b211",
        "type": "change",
        "z": "c63bc39f465d44a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "user",
                "pt": "msg",
                "to": "root",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "password",
                "pt": "msg",
                "to": "pass",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 100,
        "wires": [
            [
                "0d4e4bf155cbe34a"
            ]
        ]
    },
    {
        "id": "0d4e4bf155cbe34a",
        "type": "Axis device",
        "z": "c63bc39f465d44a2",
        "name": "",
        "preset": "a5d60ef5587cc8fc",
        "action": "Device Info",
        "cgi": "",
        "data": "",
        "options": "",
        "filename": "",
        "x": 620,
        "y": 100,
        "wires": [
            [
                "0847b3d1fed9b263"
            ]
        ]
    },
    {
        "id": "0847b3d1fed9b263",
        "type": "change",
        "z": "c63bc39f465d44a2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "device",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "51c6078c81da1e10",
        "type": "Axis device",
        "z": "c63bc39f465d44a2",
        "name": "",
        "preset": "a5d60ef5587cc8fc",
        "action": "Device Info",
        "cgi": "",
        "data": "",
        "options": "",
        "filename": "",
        "x": 610,
        "y": 380,
        "wires": [
            [
                "24c0dbf9eb01a044"
            ]
        ]
    },
    {
        "id": "a5d60ef5587cc8fc",
        "type": "Device Access",
        "name": "Localhost",
        "address": "localhost",
        "protocol": "http"
    },
    {
        "id": "d1d53d1e87be4083",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "192.168.5.249",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]
